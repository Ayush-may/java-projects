
public class BubbleSort extends Thread {
	
	int block;
	int[] color; 
	Node[] node;
	int check = 0;
	int delay;
	Boolean loopBreak;
	
	
	BubbleSort(Node node[],int color[], int block,int check,int delay){
		this.node = node;
		this.color = color;
		this.block = block;
		this.check = check;
		this.delay = delay;
	}

	@Override
	public void run() {
		bubbleSort();
		System.out.println("sdsds");
//		insertionSort();
//		selectionSort();
	}
	
	public void bubbleSort() {
		  int i, j;
		    boolean swapped;
		    for (i = 0; i < block - 1; i++) {
		        swapped = false;
		        for (j = 0; j < block - i - 1; j++) {
		        	color[j] = 1;
		        	color[j+1] = 1;
		            if (node[j].y < node[j + 1].y) {
		                int temp = node[j].y;
		                node[j].y = node[j+1].y;
		                node[j+1].y = temp;
		                swapped = true;
		            }
		            sleep();
		            color[j] = 0;
		        	color[j+1] = 0;
		        }
		        // If no two elements were swapped by inner loop,
		        // then break
		        if (swapped == false)
		            break;
		    }
		    check = 1;
		    interrupt();
		    System.out.println("Interrupted ");
		    
	}
	

	public void selectionSort(){
	    int i, j, min_idx;
	    int temp = 0;
	    
	    // One by one move boundary of
	    // unsorted subarray
	    for (i = 0; i < block - 1; i++) {
	 
	        // Find the minimum element in
	        // unsorted array
	        min_idx = i;
	        for (j = i + 1; j < block; j++) {
	            if (node[j].y < node[min_idx].y) {
	            	min_idx = j;
	            }
	            if(loopBreak) {}
	            sleep();
	        }
	        
	        // Swap the found minimum element
	        // with the first element
	        if (min_idx != i)
	        	temp = node[min_idx].y;
            	node[min_idx].y = node[i].y;
            	node[i].y = temp;
	    }
//	    sleep();
	}
	 
	public void sleep() { try{ Thread.sleep(delay);}catch(Exception e) {} }
	
	public void setDelay( int delay ) { this.delay = delay; }	
	
	public int returnCheck() { return check; }
	
	public void setBreak(boolean x) { loopBreak  = x; }
}
