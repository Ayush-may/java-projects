
public class MergeSort extends Thread{

	int block;
	int[] color; 
	Node[] node;
	int check = 0;
	int delay;
	
	MergeSort(Node node[],int color[], int block,int check,int delay){
		this.node = node;
		this.color = color;
		this.block = block;
		this.check = check;
		this.delay = delay;
	}
	
	public void run() {
		mergeSort(node,0,block-1);
	}
	
	public void mergeSort(Node arr[], int l, int r) {
		    if (l < r) {
		      int m = (l + r) / 2;
		      mergeSort(arr, l, m);
		      mergeSort(arr, m + 1, r);
		      merge(arr, l, m, r);
		    }
		    else {
		    	interrupt();
		    }
	 }
	
	public void merge(Node arr[], int p, int q, int r) {

	    int n1 = q - p + 1;
	    int n2 = r - q;

	    int L[] = new int[n1];
	    int M[] = new int[n2];

	    for (int i = 0; i < n1; i++)
	      L[i] = arr[p + i].y;
	    for (int j = 0; j < n2; j++)
	      M[j] = arr[q + 1 + j].y;

	    int i, j, k;
	    i = 0;
	    j = 0;
	    k = p;

	    while (i < n1 && j < n2) {
	      if (L[i] <= M[j]) {
	        arr[k].y = L[i];
	        color[i] = 1;
	        i++;
	      } else {
	        arr[k].y = M[j];
	        color[j] = 1;
	        j++;
	      }
	      k++;
	      try {
		      color[i-1] = 0;
		      color[j-1] = 0;	    	  
	      }catch(Exception e) {}
	      sleep();
	    }
	    while (i < n1) {
	      arr[k].y = L[i];
	      color[i] = 1;
	      color[i] = 0;
	      i++;
	      k++;
	      sleep();
	    }

	    while (j < n2) {
	      arr[k].y = M[j];
	      color[i] = 1;
	      color[i] = 0;
	      j++;
	      k++;
	      sleep();
	    }
	  }

	
	public void sleep() { try{ Thread.sleep(delay);}catch(Exception e) {} }

	public void setDelay( int delay ) { this.delay = delay; }

	public int returnCheck() { return check; }
	
}
